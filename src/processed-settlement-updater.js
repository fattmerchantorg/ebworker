const axios = require("axios");
const { db } = require("../util/db-util");
const { format, subDays, startOfTomorrow, isBefore } = require("date-fns");
const { get } = require("lodash");

const basicAuth = (finixAccessId, finixSecureKey) =>
  `Basic ${Buffer.from(`${finixAccessId}:${finixSecureKey}`).toString(
    "base64"
  )}`;

const finixHeaders = (finixAccessId, finixSecureKey) => ({
  "Content-Type": "application/json",
  Authorization: basicAuth(finixAccessId, finixSecureKey),
});

/**
 * Declare the Finix Request headers
 * which are required for all finix api calls
 */
const headers = finixHeaders(
  `${process.env.FINIX_USERNAME}`,
  `${process.env.FINIX_PASSWORD}`
);

const fetchFinixPaginatedRecords = async (
  recordType = "",
  uri = "",
  queryParams = {}
) => {
  const logger = console;

  // an array to collect all records from each page
  const allRecords = [];

  // a recursive function to gather all pages from finix
  const loadPage = async (pageNum = 0, nextPage = "", nextParams = {}) => {
    logger.log(
      `called fetchFinixPaginatedRecords(${recordType}, ${uri})::loadPage(${pageNum}, '${nextPage}', ${JSON.stringify(
        nextParams
      )})`
    );
    try {
      const finixRecordsRequest = await axios({
        url: nextPage,
        params: nextParams,
        method: "get",
        headers,
      });
      const records = get(
        finixRecordsRequest.data,
        `_embedded.${recordType}`,
        []
      );

      const nextPageLink = get(
        finixRecordsRequest.data,
        "_links.next.href",
        false
      );

      // always add these new records into the array of all records
      allRecords.push(...records);

      // DEBUGGING ONLY
      const onlyGetFirstPage = false;

      // if there is no next page link, there isn't a next page
      // finix is nice and does this for us.
      if (!onlyGetFirstPage && nextPageLink) {
        // dodn't pass nextParams since they will be included in the nextPageLink already by finix
        return await loadPage(pageNum + 1, nextPageLink);
      } else {
        logger.log(
          `fetchFinixPaginatedRecords(${recordType}, ${uri}): loaded last page, returning ${allRecords.length} ${recordType}s`
        );
        return allRecords;
      }
    } catch (error) {
      logger.error(
        `fetchFinixPaginatedRecords(${recordType}, ${uri}): error occured`,
        get(error, "response.data")
      );
    }
  };

  // load the first page
  return await loadPage(1, `${process.env.FINIX_BASE_URL}/${uri}`, queryParams);
};

/**
 * Builds basic params for Finix calls
 * Defaults to previous 35 days for dates
 */
const getParams = (startDate, endDate) => {
  return {
    "created_at.gte": format(
      startDate ? startDate : subDays(new Date(), 35),
      "YYYY-MM-DD"
    ),
    "created_at.lte": format(
      endDate ? endDate : startOfTomorrow(),
      "YYYY-MM-DD"
    ),
    sort: "created_at,asc",
    limit: 100,
  };
};

const fetchFinixSettlements = async (startDate, endDate) => {
  const params = getParams(startDate, endDate);

  // need to change this to https://finix.live-payments-api.com/settlement_engine/settlements/STmCAke8Kc3XVSgMJmizHj2V
  return await fetchFinixPaginatedRecords(
    "settlements",
    `settlement_engine/settlements`,
    params
  );
};

const fetchSingleFinixSettlement = async (settlementId) => {
  const finixRecordsRequest = await axios({
    url: `${process.env.FINIX_BASE_URL}/settlement_engine/settlements/${settlementId}`,
    method: "get",
    headers,
  });
  return finixRecordsRequest.data;
};

const skipIds = [
  // 272995, 272996, 273004, 272999, 272994, 273013, 273006, 273000, 273001,
  // 273008, 273005, 272998, 273002, 273009, 273012, 273010, 272997, 273003,
  // 273007, 273011, 273014, 273017, 273027, 273015, 273020, 273025, 273028,
  // 273024, 273023, 273018, 273033, 273019, 273022, 273016, 273026, 273029,
  // 273031, 273032, 273030, 273021, 273039, 273036, 273042, 273044, 273034,
  // 273047, 273049, 273038, 273035, 273045, 273040, 273037, 273054, 273041,
  // 273050, 273052, 273043, 273048, 273053, 273051, 273061, 273057, 273065,
  // 273055, 273063, 273058, 273072, 273056, 273067, 273066, 273068, 273070,
  // 273062, 273060, 273064, 273074, 273069, 273073, 273059, 273071, 273075,
  // 273076, 273091, 273080, 273090, 273085, 273094, 273088, 273092, 273078,
  // 273086, 273079, 273082, 273093, 273077, 273087, 273084, 273081, 273083,
  // 273089, 273108, 273106, 273104, 273100, 273103, 273097, 273111, 273098,
  // 273114, 273101, 273107, 273099, 273112, 273109, 273110, 273095, 273102,
  // 273096, 273105, 273113, 273125, 273130, 273124, 273122, 273118, 273119,
  // 273121, 273133, 273117, 273123, 273116, 273120, 273127, 273115, 273131,
  // 273126, 273129, 273128, 273132, 273134, 273147, 273138, 273139, 273137,
  // 273142, 273150, 273149, 273143, 273140, 273153, 273136, 273148, 273135,
  // 273152, 273145, 273151, 273146, 273144, 273154, 273141, 273168, 273160,
  // 273172, 273159, 273174, 273158, 273171, 273161, 273169, 273164, 273157,
  // 273155, 273173, 273165, 273163, 273162, 273170, 273167, 273156, 273166,
  // 273177, 273178, 273180, 273175, 273176, 273193, 273184, 273189, 273182,
  // 273181, 273179, 273192, 273190, 273191, 273194, 273187, 273188, 273185,
  // 273183, 273186, 273200, 273209, 273205, 273211, 273199, 273197, 273207,
  // 273202, 273204, 273212, 273196, 273206, 273201, 273203, 273198, 273210,
  // 273213, 273195, 273208, 273214, 273218, 273219, 273229, 273215, 273234,
  // 273232, 273223, 273231, 273233, 273225, 273222, 273217, 273230, 273226,
  // 273221, 273228, 273220, 273216, 273224, 273227, 273242, 273240, 273237,
  // 273250, 273248, 273243, 273238, 273253, 273236, 273239, 273246, 273235,
  // 273247, 273254, 273249, 273245, 273251, 273252, 273244, 273241, 273262,
  // 273256, 273260, 273271, 273264, 273263, 273274, 273255, 273273, 273265,
  // 273261, 273259, 273268, 273266, 273269, 273258, 273267, 273272, 273270,
  // 273257, 273285, 273290, 273280, 273279, 273291, 273289, 273293, 273275,
  // 273277, 273294, 273281, 273286, 273284, 273278, 273276, 273287, 273288,
  // 273282, 273292, 273283, 273312, 273302, 273303, 273304, 273297, 273307,
  // 273300, 273295, 273308, 273306, 273309, 273313, 273298, 273299, 273301,
  // 273296, 273310, 273314, 273305, 273311, 273316, 273318, 273325, 273330,
  // 273328, 273315, 273323, 273332, 273333, 273331, 273320, 273329, 273324,
  // 273317, 273322, 273319, 273334, 273321, 273327, 273326, 273354, 273335,
  // 273349, 273336, 273343, 273351, 273342, 273350, 273339, 273347, 273346,
  // 273341, 273353, 273337, 273352, 273344, 273348, 273338, 273345, 273340,
  // 273362, 273366, 273357, 273370, 273359, 273361, 273373, 273358, 273369,
  // 273356, 273368, 273355, 273367, 273371, 273364, 273360, 273363, 273372,
  // 273365, 273374, 273375, 273384, 273379, 273377, 273382, 273390, 273393,
  // 273380, 273376, 273386, 273381, 273378, 273392, 273389, 273387, 273383,
  // 273394, 273385, 273388, 273391, 273395, 273396, 273408, 273397, 273400,
  // 273401, 273398, 273403, 273399, 273410, 273412, 273411, 273414, 273413,
  // 273409, 273404, 273407, 273402, 273406, 273405, 273419, 273423, 273425,
  // 273416, 273426, 273415, 273418, 273424, 273429, 273421, 273431, 273428,
  // 273433, 273427, 273432, 273420, 273422, 273430, 273434, 273417, 273436,
  // 273438, 273448, 273454, 273455, 273435, 273440, 273445, 273443, 273453,
  // 273447, 273451, 273452, 273444, 273442, 273441, 273439, 273437, 273450,
  // 273446, 273467, 273457, 273475, 273456, 273468, 273462, 273474, 273461,
  // 273470, 273473, 273466, 273469, 273463, 273458, 273471, 273460, 273459,
  // 273465, 273464, 273472, 273487, 273477, 273492, 273495, 273482, 273478,
  // 273480, 273485, 273489, 273488, 273486, 273476, 273481, 273483, 273494,
  // 273490, 273484, 273491, 273493, 273479, 273499, 273504, 273503, 273512,
  // 273510, 273505, 273513, 273511, 273509, 273498, 273501, 273506, 273496,
  // 273502, 273514, 273508, 273507, 273500, 273515, 273497, 273518, 273523,
  // 273528, 273527, 273525, 273520, 273532, 273533, 273524, 273535, 273531,
  // 273534, 273522, 273530, 273517, 273516, 273519, 273529, 273526, 273521,
  // 273540, 273537, 273536, 273549, 273551, 273539, 273544, 273548, 273546,
  // 273541, 273550, 273542, 273552, 273547, 273555, 273553, 273538, 273554,
  // 273543, 273545, 273557, 273573, 273572, 273571, 273566, 273562, 273559,
  // 273575, 273564, 273563, 273556, 273561, 273560, 273558, 273574, 273570,
  // 273568, 273567, 273565, 273569, 273577, 273585, 273590, 273576, 273595,
  // 273594, 273579, 273581, 273593, 273589, 273580, 273582, 273591, 273588,
  // 273583, 273578, 273586, 273587, 273584, 273592, 273608, 273605, 273604,
  // 273598, 273613, 273596, 273609, 273606, 273602, 273611, 273614, 273599,
  // 273612, 273615, 273600, 273603, 273601, 273610, 273607, 273597, 273628,
  // 273622, 273616, 273632, 273630, 273634, 273635, 273626, 273627, 273617,
  // 273633, 273620, 273619, 273621, 273624, 273625, 273623, 273618, 273631,
  // 273629, 273641, 273636, 273655, 273648, 273652, 273637, 273643, 273645,
  // 273653, 273639, 273647, 273638, 273640, 273650, 273642, 273649, 273651,
  // 273644, 273646, 273654, 273670, 273657, 273662, 273661, 273658, 273668,
  // 273664, 273671, 273669, 273667, 273663, 273660, 273672, 273659, 273675,
  // 273666, 273665, 273656, 273673, 273674, 273677, 273681, 273686, 273694,
  // 273682, 273689, 273676, 273679, 273680, 273683, 273685, 273688, 273691,
  // 273695, 273693, 273687, 273684, 273678, 273690, 273692, 273704, 273713,
  // 273709, 273707, 273696, 273702, 273699, 273703, 273700, 273705, 273701,
  // 273715, 273710, 273708, 273711, 273706, 273697, 273698, 273714, 273712,
  // 273724, 273733, 273723, 273728, 273717, 273725, 273720, 273732, 273735,
  // 273722, 273726, 273730, 273719, 273727, 273716, 273718, 273721, 273729,
  // 273734, 273731, 273741, 273744, 273746, 273738, 273737, 273745, 273747,
  // 273750, 273743, 273749, 273753, 273740, 273748, 273752, 273739, 273755,
  // 273754, 273751, 273736, 273742, 273759, 273756, 273774, 273772, 273770,
  // 273769, 273760, 273762, 273766, 273771, 273765, 273767, 273761, 273758,
  // 273757, 273768, 273764, 273775, 273773, 273763, 273792, 273781, 273793,
  // 273789, 273777, 273776, 273790, 273785, 273782, 273787, 273795, 273778,
  // 273783, 273784, 273794, 273791, 273780, 273779, 273786, 273788, 273803,
  // 273796, 273807, 273805, 273809, 273797, 273799, 273814, 273811, 273812,
  // 273815, 273806, 273801, 273808, 273804, 273798, 273800, 273802, 273813,
  // 273810, 273831, 273835, 273816, 273817, 273820, 273818, 273828, 273823,
  // 273819, 273825, 273821, 273822, 273827, 273833, 273830, 273829, 273826,
  // 273824, 273834, 273832, 273839, 273845, 273836, 273847, 273837, 273838,
  // 273841, 273846, 273840, 273842, 273848, 273850, 273849, 273851, 273852,
  // 273844, 273853, 273854, 273843, 273855, 273857, 273858, 273856, 273870,
  // 273862, 273865, 273860, 273863, 273867, 273861, 273859, 273873, 273874,
  // 273875, 273864, 273871, 273868, 273869, 273866, 273872, 273881, 273879,
  // 273883, 273886, 273887, 273893, 273884, 273880, 273889, 273877, 273892,
  // 273885, 273882, 273876, 273891, 273888, 273894, 273890, 273895, 273878,
  // 273906, 273896, 273897, 273898, 273900, 273907, 273913, 273899, 273905,
  // 273909, 273914, 273915, 273904, 273912, 273901, 273908, 273911, 273902,
  // 273903, 273910, 273920, 273925, 273922, 273917, 273926, 273934, 273921,
  // 273918, 273929, 273928, 273933, 273919, 273932, 273927, 273916, 273931,
  // 273930, 273923, 273924, 273935, 273951, 273954, 273955, 273938, 273948,
  // 273942, 273950, 273944, 273946, 273943, 273940, 273939, 273936, 273952,
  // 273945, 273941, 273947, 273953, 273949, 273937, 273961, 273965, 273973,
  // 273963, 273975, 273971, 273956, 273962, 273974, 273958, 273967, 273960,
  // 273957, 273970, 273959, 273969, 273972, 273968, 273964, 273966, 273980,
  // 273982, 273992, 273985, 273977, 273976, 273983, 273989, 273978, 273984,
  // 273979, 273981, 273986, 273995, 273988, 273987, 273991, 273990, 273994,
  // 273993, 274003, 274015, 274008, 274012, 273998, 273997, 274002, 274000,
  // 274001, 273999, 274006, 274004, 274014, 274013, 274005, 274007, 273996,
  // 274010, 274011, 274009, 274020, 274024, 274033, 274029, 274028, 274017,
  // 274027, 274026, 274022, 274031, 274023, 274030, 274019, 274025, 274034,
  // 274021, 274018, 274032, 274016, 274035, 274042, 274039, 274050, 274041,
  // 274037, 274038, 274043, 274049, 274036, 274054, 274053, 274044, 274051,
  // 274047, 274055, 274045, 274046, 274052, 274040, 274048, 274073, 274065,
  // 274058, 274059, 274068, 274075, 274066, 274074, 274056, 274064, 274070,
  // 274069, 274067, 274060, 274061, 274071, 274072, 274063, 274057, 274062,
  // 274077, 274090, 274085, 274088, 274080, 274089, 274076, 274083, 274091,
  // 274081, 274082, 274078, 274093, 274079, 274095, 274094, 274087, 274086,
  // 274092, 274084, 274105, 274107, 274108, 274097, 274103, 274114, 274096,
  // 274101, 274100, 274104, 274099, 274098, 274110, 274111, 274115, 274106,
  // 274109, 274102, 274112, 274113, 274133, 274118, 274125, 274128, 274116,
  // 274127, 274121, 274130, 274126, 274122, 274123, 274120, 274124, 274132,
  // 274134, 274135, 274119, 274117, 274131, 274129, 274144, 274138, 274153,
  // 274136, 274140, 274137, 274151, 274146, 274147, 274139, 274142, 274143,
  // 274149, 274148, 274145, 274141, 274150, 274155, 274154, 274152, 274168,
  // 274162, 274165, 274173, 274161, 274160, 274159, 274163, 274175, 274157,
  // 274169, 274167, 274174, 274158, 274171, 274166, 274156, 274164, 274170,
  // 274172, 274179, 274176, 274189, 274186, 274182, 274181, 274192, 274180,
  // 274178, 274193, 274183, 274188, 274191, 274177, 274185, 274194, 274184,
  // 274187, 274190, 274195, 274201, 274207, 274197, 274196, 274210, 274204,
  // 274199, 274205, 274203, 274202, 274214, 274211, 274209, 274215, 274198,
  // 274208, 274212, 274213, 274206, 274200, 274216, 274222, 274228, 274232,
  // 274234, 274230, 274221, 274231, 274225, 274223, 274219, 274229, 274233,
  // 274220, 274235, 274224, 274227, 274218, 274217, 274226, 274237, 274247,
  // 274241, 274252, 274246, 274251, 274253, 274239, 274248, 274240, 274236,
  // 274255, 274244, 274242, 274254, 274238, 274250, 274245, 274243, 274249,
  // 274268, 274256, 274272, 274262, 274263, 274260, 274275, 274274, 274259,
  // 274273, 274265, 274257, 274264, 274266, 274270, 274271, 274261, 274269,
  // 274267, 274258, 274290, 274294, 274282, 274279, 274287, 274285, 274291,
  // 274289, 274292, 274281, 274280, 274276, 274278, 274286, 274284, 274295,
  // 274277, 274283, 274293, 274288, 274313, 274310, 274306, 274312, 274304,
  // 274305, 274302, 274297, 274298, 274307, 274299, 274315, 274311, 274303,
  // 274308, 274301, 274296, 274314, 274300, 274309, 274322, 274333, 274319,
  // 274323, 274317, 274329, 274330, 274321, 274328, 274318, 274324, 274331,
  // 274316, 274320, 274326, 274325, 274334, 274332, 274327, 274335, 274349,
  // 274340, 274354, 274351, 274355, 274342, 274344, 274347, 274341, 274343,
  // 274353, 274345, 274339, 274337, 274346, 274348, 274350, 274352, 274338,
  // 274336, 274367, 274358, 274372, 274360, 274375, 274368, 274371, 274362,
  // 274361, 274364, 274370, 274369, 274373, 274357, 274359, 274374, 274365,
  // 274356, 274366, 274363, 274379, 274388, 274386, 274376, 274378, 275379,
  // 275371, 275373, 275381, 275378, 275382, 275369, 274377, 275380, 275370,
  // 275372, 274382, 275376, 275377, 275375, 275388, 275395, 275403, 275400,
  // 275386, 275383, 275401, 275392, 275394, 275396, 275390, 275398, 275399,
  // 275385, 275391, 275393, 275397, 275402, 275387, 275389, 275419, 275405,
  // 275411, 275409, 275420, 275422, 275423, 275416, 275417, 275413, 275410,
  // 275415, 275406, 275414, 275407, 275412, 275404, 275421, 275418, 275408,
  // 275426, 275431, 275439, 275435, 275434, 275433, 275436, 275437, 275442,
  // 275438, 275429, 275440, 275427, 275424, 275441, 275428, 275432, 275443,
  // 275425, 275430, 275459, 275454, 275457, 275447, 275453, 275456, 275445,
  // 275449, 275450, 275461, 275451, 275458, 275462, 275448, 275460, 275452,
  // 275463, 275446, 275455, 275444, 275464, 275479, 275476, 275466, 275480,
  // 275482, 275468, 275467, 275481, 275465, 275472, 275473, 275477, 275483,
  // 275478, 275469, 275470, 275474, 275471, 275475, 275493, 275503, 275486,
  // 275492, 275498, 275484, 275487, 275496, 275488, 275499, 275495, 275489,
  // 275485, 275494, 275491, 275497, 275501, 275500, 275502, 275490, 275514,
  // 275506, 275508, 275516, 275511, 275517, 275521, 275513, 275515, 275512,
  // 275519, 275507, 275504, 275505, 275510, 275518, 275520, 275509, 275522,
  // 275523, 276786, 275525, 275528, 276783, 275529, 276784, 276788, 276778,
  // 275526, 275811, 276782, 276776, 276781, 276780, 276785, 276779, 275527,
  // 276777, 276787, 275524, 276791, 276790, 276806, 276807, 276801, 276799,
  // 276805, 276800, 276794, 276795, 276802, 276808, 276804, 276789, 276792,
  // 276803, 276796, 276798, 276797, 276793, 276810, 276813, 276822, 276812,
  // 276816, 276814, 276826, 276815, 276821, 276817, 276809, 276819, 276818,
  // 276827, 276824, 276811, 276825, 276823, 276828, 276820, 276833, 276846,
  // 276847, 276844, 276843, 276842, 276837, 276830, 276832, 276839, 276836,
  // 276848, 276835, 276841, 276838, 276840, 276834, 276831, 276829, 276845,
  // 276853, 276856, 276858, 276865, 276862, 276851, 276859, 276868, 276860,
  // 276849, 276852, 276850, 276866, 276861, 276867, 276857, 276863, 276854,
  // 276864, 276855, 276888, 276874, 276871, 276876, 276887, 276878, 276870,
  // 276877, 276881, 276873, 276869, 276875, 276880, 276879, 276882, 276872,
  // 276883, 276886, 276885, 276884, 276897, 276898, 276901, 276890, 276895,
  // 276906, 276902, 276889, 276908, 276907, 276892, 276899, 276900, 276894,
  // 276893, 276896, 276891, 276904, 276903, 276905, 276915, 278178, 276909,
  // 278171, 278164, 276916, 278160, 276914, 276910, 278173, 278177, 278159,
  // 276912, 278161, 276913, 278168, 276911, 278166, 278174, 278167, 279703,
  // 278181, 279705, 278184, 278190, 278198, 278180, 278194, 278189, 278187,
  // 278195, 278185, 279704, 278196, 278182, 279702, 278202, 278200, 278201,
  // 278203, 279720, 279716, 279721, 279723, 279707, 279708, 279712, 279706,
  // 279714, 279725, 279717, 279715, 279719, 279718, 279724, 279709, 279713,
  // 279722, 279710, 279711, 279739, 279735, 279734, 279742, 279727, 279733,
  // 279741, 279728, 279745, 279730, 279743, 279731, 279744, 279740, 279726,
  // 279738, 279729, 279732, 279736, 279737, 279759, 279751, 279749, 279755,
  // 279750, 279748, 279757, 279760, 279758, 279761, 279752, 279753, 279764,
  // 279754, 279746, 279765, 279762, 279763, 279747, 279756, 279783, 279768,
  // 279779, 279775, 279770, 279766, 279782, 279772, 279785, 279784, 279774,
  // 279767, 279780, 279773, 279777, 279778, 279771, 279781, 279776, 279769,
  // 279795, 279792, 279799, 279794, 281166, 279793, 281168, 279796, 279797,
  // 279791, 279788, 279786, 279790, 279798, 279789, 281167, 279787, 282385,
  // 282388, 282387, 282384, 282382, 282389, 282407, 282410, 282400, 282414,
  // 282406, 282403, 282409, 282405, 282391, 282413, 282401, 282398, 282415,
  // 282390, 282402, 282412, 282411, 282394, 282404, 282396, 282427, 282434,
  // 282429, 282435, 282421, 282422, 282418, 282417, 282416, 282433, 282436,
  // 282428, 282431, 282426, 282432, 284044, 284043, 284042, 284039, 284038,
  // 284037, 284040, 284036, 284041, 284050, 288717, 288708, 288710, 288705,
  // 288723, 288703, 288712, 288729, 288713, 288707, 288726, 288720, 288725,
  // 288727, 288709, 288715, 288714, 288711, 288724, 288722, 288706, 288719,
  // 288721, 288734, 288716, 288718, 288733, 288732, 288730, 288731, 290112,
  // 293278, 293277, 293282, 293281, 293279, 293280, 295813, 295816, 295814,
  // 295815, 295817, 297057, 297053, 297055, 297052, 297059, 297060, 301230,
  // 308149, 314185,
  1,
];

const run = async () => {
  // const start = "2021-10-01 00:00:00";
  // const end = "2021-11-02 00:00:00";

  // const finixSettlements = await fetchFinixSettlements(
  //   "2021-10-01 00:00:00",
  //   // "2021-11-12 00:00:00"
  //   "2021-10-02 00:00:00"
  // );

  // const finixSettlementsIds = finixSettlements.map((fs) => fs.id);

  const updatedSettlementIds = [];

  const start = "2021-01-01 00:00:00";
  const end = "2021-04-01 00:00:00";
  // const end = "2021-11-02 00:00:00";
  const limit = 1000;

  const rows = await new Promise((resolve, reject) => {
    db().query(
      `
      SELECT ps.id, ps.external_id 
      FROM fatt.processed_settlements AS ps
      WHERE ps.created_at BETWEEN ? AND ?
      AND ps.id NOT IN (?)
      AND ps.external_created_at IS NULL
      LIMIT ?
  `,
      [start, end, skipIds, limit],
      (error, rows) => {
        if (error) {
          reject(error);
        } else {
          resolve(rows);
        }
      }
    );
  });

  if (!rows.length) {
    console.log("no results");
    process.exit();
  }

  await Promise.all(
    rows.map(async (row, index) => {
      try {
        // const settlement = finixSettlements.find(
        //   (s) => s.id === row.external_id
        // );

        // if (!settlement) return;

        // console.log(
        //   "settlement",
        //   row.id,
        //   settlement.id,
        //   settlement.created_at,
        //   settlement
        // );

        const settlement = await fetchSingleFinixSettlement(row.external_id);

        if (isBefore(settlement.created_at, start)) {
          console.log("skipping", row.id, settlement.created_at);
          skipIds.push(row.id);
          return;
        }

        const bindings = [
          settlement.created_at
            ? settlement.created_at.slice(0, 19).replace("T", " ")
            : null,
          row.id,
        ];

        await new Promise((resolve, reject) => {
          db().query(
            `
            UPDATE fatt.processed_settlements
            SET external_created_at = ?
            WHERE id = ?
          `,
            bindings,
            (error, result) => (error ? reject(error) : resolve(result))
          );
        });

        updatedSettlementIds.push(row.id);
      } catch (error) {}
    })
  );

  console.log(
    "found processed_settlements:",
    rows.map((r) => r.id),
    rows.length
  );
  console.log(
    "updated settlements:",
    updatedSettlementIds,
    updatedSettlementIds.length
  );

  await new Promise((resolve) => setTimeout(resolve, 2000));

  run();
};

module.exports = { run };
